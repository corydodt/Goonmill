#!/bin/bash

# run twistd goonmill repeatedly, whenever a source file changes

NOTIFY_FILES=('*.py' )

echo
echo ^C to kill.
echo

running() {
    ps -p "$1" >/dev/null 2>&1
    return
}

killTwistd() {
    MAINPID=`cat goonmill.pid 2> /dev/null`
    if [ -z "$MAINPID" ]; then 
        return
    fi

    childs=$(pgrep -P $MAINPID)
    if [ -n "$childs" ]; then 
        echo "  Killing child PIDs $childs"
        for child in $childs; do kill $child; done
    fi

    echo Killing main PID $MAINPID
    kill $MAINPID

    sleep 1.0

    for pid in $MAINPID $childs; do
        if running $pid; then
            echo "  Force-killing pid $pid"
            kill -9 $pid
        fi
    done
}

# this trap will clean up when someone presses ^C
trap killTwistd EXIT

# convert NOTIFY_FILES glob list into a file list
_notifyParameters=("-name" "${NOTIFY_FILES[0]}")
unset NOTIFY_FILES[0]
for file in "${NOTIFY_FILES[@]}"; do
    _notifyParameters=( "${_notifyParameters[@]}" "-o" "-name" "$file" )
done

_files=$(find . "${_notifyParameters[@]}" )

# set up the command line options we will use
[ -e ./options.local ] && source ./options.local
inotifyOptions=${inotifyOptions:--e modify "${_files}"} 
twistdOptions=${twistdOptions:--n --pidfile goonmill.pid}
goonmillOptions=${goonmillOptions:---dev}

safeTTY() {
    tty="`tty`"
    if [ "$tty" == "not a tty" ]; then
        tty=/dev/null
    fi
    echo "$tty"
}

while true; do
  killTwistd
  # Python automatically compiles source files; if we let it do that,
  # dnotify will think something has changed as soon as twistd imports the
  # file that changed, and we'll restart twice.
  # To prevent that, compile this directory now before running.
  echo COMPILING
  python -m compileall . >/dev/null 2>&1
  # Redirect stdin from our tty. If you don't do this, interactive pdb
  # doesn't work.
  echo RUNNING
  twistd ${twistdOptions} goonmill ${goonmillOptions} <"`safeTTY`" &
  inotifywait ${inotifyOptions}
done
 
